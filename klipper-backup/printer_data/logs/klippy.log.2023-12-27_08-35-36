Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-40-g77619e91-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]'
Start printer at Wed Dec 27 08:35:09 2023 (1703662509.4 383.0)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]
recover_velocity = 25

[display_status]

[respond]
default_prefix = 

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	G0 X5 Y220 Z10
	CLEAR_PAUSE
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set x = params.X|default(5) %}
	{% set y = params.Y|default(225) %}
	{% set z = params.Z|default(10)|float %}
	{% set e = params.E|default(1) %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set lift_z = z|abs %}
	{% if act_z < (max_z - lift_z) %}
	{% set z_safe = lift_z %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	PAUSE_BASE
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E-{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe}
	G90
	G1 X{x} Y{y} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set e = params.E|default(1) %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro START_PRINT]
gcode = 
	RESPOND MSG="Preparing to print"
	
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
	SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 Z_HEIGHT=.3 PURGE_AMOUNT=20 LINE_LENGTH=25
	
	G90
	M83
	RESPOND MSG="Warming up for bed leveling"
	M104 S170
	M140 S{BED_TEMP}
	M109 S170
	M190 S{BED_TEMP}
	G28
	
	
	BED_MESH_CLEAR
	EXCLUDE_OBJECT_DEFINE
	RESPOND MSG="KAMP Adaptive Bed Meshing"
	BED_MESH_CALIBRATE
	Smart_Park
	RESPOND MSG="Heating to print temp"
	M104 S{EXTRUDER_TEMP}
	G0 Z50 F240
	RESPOND MSG="Clean bed and nozzle"
	G0 X2 Y220 F3000
	M109 S{EXTRUDER_TEMP}
	RESPOND MSG="KAMP Line Purge"
	LINE_PURGE
	RESPOND MSG="Print Started"

[gcode_macro END_PRINT]
gcode = 
	
	RESPOND MSG="Print Finished"
	G91
	G1 E-.5 Z0.2 F2400
	G1 X5 Y5 F6000
	G1 Z10
	G90
	
	
	G1 Z{printer.toolhead.position.z + 10} F600
	G1 X0 Y220 F6000
	M106 S0
	M104 S0
	M140 S0
	
	
	M84 X Y E

[gcode_macro G29]
gcode = 
	G28
	BED_MESH_CALIBRATE
	G0 X0 Y0 Z10 F6000
	BED_MESH_PROFILE save=default

[gcode_macro Load_Filament]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M117 Loading Filament
	M83
	G92 E0.0
	G1 E5 F200
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro Unload_Filament]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	M125
	M117 Unloading Filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-5 F3000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro Filament_Change]
gcode = 
	M117 Filament Change
	M118 Filament Change
	SAVE_GCODE_STATE NAME=filament_change
	PAUSE
	G91
	G1 E-1 F300
	M125
	G1 E-5 F300
	RESTORE_GCODE_STATE NAME=filament_change

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M125]
gcode = 
	SAVE_GCODE_STATE NAME=parking
	M117 Parking toolhead
	G91
	G1 Z10 F600
	G90
	G1 X5 Y225 F4000
	RESTORE_GCODE_STATE NAME=parking

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[gcode_macro _OBICO_LAYER_CHANGE]
description = Run a scan across the current print area
variable_current_layer = -1
variable_first_layer_scan_enabled = True
variable_first_layer_scan_stepover = 10
variable_first_layer_scan_feedrate = 600
variable_first_layer_scan_zhop = 4
variable_first_layer_scan_retract = 6.5
variable_first_layer_scanning = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=current_layer VALUE={params.CURRENT_LAYER|int}
	{% if first_layer_scan_enabled and params.CURRENT_LAYER|int == 2 %}
	SAVE_GCODE_STATE NAME=current_print_state
	{% set current_x = printer.toolhead.position.x %}
	{% set current_y = printer.toolhead.position.y %}
	
	{% if first_layer_scan_retract > 0 and printer[printer.toolhead.extruder].can_extrude %}
	M83
	G0 E-{first_layer_scan_retract} F900
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=first_layer_scanning VALUE=True
	G91
	G0 Z{first_layer_scan_zhop} F1000
	G90
	{% if 'MINX' in params and 'MAXX' in params and 'MINY' in params and 'MAXY' in params %}
	{% set stepoverCount = ((params.MAXY|float - params.MINY|float) / first_layer_scan_stepover) | round(method='ceil') | int %}
	G0 X{params.MINX} Y{params.MINY} F{first_layer_scan_feedrate}
	{% for ystep in range(stepoverCount) %}
	G0 Y{params.MINY|float + first_layer_scan_stepover * ystep}
	{% if ystep % 2 == 0 %}
	G0 X{params.MAXX} F{first_layer_scan_feedrate}
	{% else %}
	G0 X{params.MINX} F{first_layer_scan_feedrate}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	G0 X{current_x} Y{current_y} F{first_layer_scan_feedrate}
	G91
	G0 Z-{first_layer_scan_zhop} F1000
	
	{% if first_layer_scan_retract > 0 and printer[printer.toolhead.extruder].can_extrude %}
	G0 E{first_layer_scan_retract} F900
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=current_print_state
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=first_layer_scanning VALUE=False
	{% endif %}

[exclude_object]

[input_shaper]
shaper_freq_x = 68.8
shaper_type_x = mzv
shaper_freq_y = 44.4
shaper_type_y = mzv

[bltouch]
sensor_pin = ^PB1
control_pin = PB0
x_offset = -31.8
y_offset = -40.5
speed = 35
samples = 3
samples_result = median
samples_tolerance = 0.0075
samples_tolerance_retries = 10
probe_with_touch_mode = true
stow_on_each_sample = false
z_offset = 1.960

[safe_z_home]
home_xy_position = 147, 154
speed = 75
z_hop = 10
z_hop_speed = 5
move_to_previous = true

[bed_mesh]
speed = 120
horizontal_move_z = 8
mesh_min = 15,15
mesh_max = 188,186
probe_count = 7,7
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA5
position_endstop = 0
position_max = 250
homing_speed = 50

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA6
position_endstop = 0
position_max = 250
homing_speed = 50

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 240
position_min = -2

[extruder]
max_extrude_only_distance = 100.0
step_pin = PB4
dir_pin = PB3
enable_pin = !PC3
microsteps = 16
gear_ratio = 42:12
rotation_distance = 26.359
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
pressure_advance = .088
pressure_advance_smooth_time = 0.04
control = pid
pid_kp = 20.666
pid_ki = 1.158
pid_kd = 92.223

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 68.928
pid_ki = 1.081
pid_kd = 1098.546

[fan]
pin = PA0

[mcu]
serial = /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3500
max_accel_to_decel = 3500
max_z_velocity = 5
max_z_accel = 100
square_corner_velocity = 5

[bed_screws]
screw1 = 25, 205
screw1_name = rear left screw
screw2 = 195, 205
screw2_name = rear right screw
screw3 = 195, 35
screw3_name = front right screw
screw4 = 25, 35
screw4_name = front left screw

[screws_tilt_adjust]
screw1 = 57, 229
screw1_name = rear left screw
screw2 = 227, 229
screw2_name = rear right screw
screw3 = 227, 70
screw3_name = front right screw
screw4 = 57, 70
screw4_name = front left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M3

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[firmware_retraction]
retract_length = 0.6
retract_speed = 85
unretract_extra_length = 0
unretract_speed = 40

[bed_mesh default]
version = 1
points = 
	0.100000, 0.065000, 0.032500, 0.070000
	0.097500, 0.082500, 0.022500, 0.077500
	0.132500, 0.057500, -0.002500, -0.005000
	0.145000, 0.102500, 0.075000, 0.115000
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 73.63000000000001
max_x = 146.36999999999998
min_y = 72.51
max_y = 147.46
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
webhooks client 140734741912592: New connection
webhooks client 140734741912592: Client info {'program': 'Moonraker', 'version': 'v0.8.0-223-g7fc5716'}
mcu 'mcu': got {'oid': 11, 'next_clock': 1691716224, 'value': 31420, '#name': 'analog_in_state', '#sent_time': 383.861222327, '#receive_time': 383.90518965999996}
mcu 'mcu': got {'oid': 14, 'next_clock': 1693876224, 'value': 14040, '#name': 'analog_in_state', '#sent_time': 383.91518556700004, '#receive_time': 383.935184641}
mcu 'mcu': got {'oid': 16, 'next_clock': 1695316224, 'value': 31416, '#name': 'analog_in_state', '#sent_time': 383.91518556700004, '#receive_time': 383.95518460399995}
Loaded MCU 'mcu' 112 commands (v0.12.0-25-g99d7af87 / gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.39-8+rpi1+18) 2.39)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Configured MCU 'mcu' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (46.8, 55.5)    | (15.0, 15.0)
  1   | (75.6, 55.5)    | (43.8, 15.0)
  2   | (104.5, 55.5)   | (72.7, 15.0)
  3   | (133.3, 55.5)   | (101.5, 15.0)
  4   | (162.1, 55.5)   | (130.3, 15.0)
  5   | (190.9, 55.5)   | (159.1, 15.0)
  6   | (219.8, 55.5)   | (188.0, 15.0)
  7   | (219.8, 84.0)   | (188.0, 43.5)
  8   | (190.9, 84.0)   | (159.1, 43.5)
  9   | (162.1, 84.0)   | (130.3, 43.5)
  10  | (133.3, 84.0)   | (101.5, 43.5)
  11  | (104.5, 84.0)   | (72.7, 43.5)
  12  | (75.6, 84.0)    | (43.8, 43.5)
  13  | (46.8, 84.0)    | (15.0, 43.5)
  14  | (46.8, 112.5)   | (15.0, 72.0)
  15  | (75.6, 112.5)   | (43.8, 72.0)
  16  | (104.5, 112.5)  | (72.7, 72.0)
  17  | (133.3, 112.5)  | (101.5, 72.0)
  18  | (162.1, 112.5)  | (130.3, 72.0)
  19  | (190.9, 112.5)  | (159.1, 72.0)
  20  | (219.8, 112.5)  | (188.0, 72.0)
  21  | (219.8, 141.0)  | (188.0, 100.5)
  22  | (190.9, 141.0)  | (159.1, 100.5)
  23  | (162.1, 141.0)  | (130.3, 100.5)
  24  | (133.3, 141.0)  | (101.5, 100.5)
  25  | (104.5, 141.0)  | (72.7, 100.5)
  26  | (75.6, 141.0)   | (43.8, 100.5)
  27  | (46.8, 141.0)   | (15.0, 100.5)
  28  | (46.8, 169.5)   | (15.0, 129.0)
  29  | (75.6, 169.5)   | (43.8, 129.0)
  30  | (104.5, 169.5)  | (72.7, 129.0)
  31  | (133.3, 169.5)  | (101.5, 129.0)
  32  | (162.1, 169.5)  | (130.3, 129.0)
  33  | (190.9, 169.5)  | (159.1, 129.0)
  34  | (219.8, 169.5)  | (188.0, 129.0)
  35  | (219.8, 198.0)  | (188.0, 157.5)
  36  | (190.9, 198.0)  | (159.1, 157.5)
  37  | (162.1, 198.0)  | (130.3, 157.5)
  38  | (133.3, 198.0)  | (101.5, 157.5)
  39  | (104.5, 198.0)  | (72.7, 157.5)
  40  | (75.6, 198.0)   | (43.8, 157.5)
  41  | (46.8, 198.0)   | (15.0, 157.5)
  42  | (46.8, 226.5)   | (15.0, 186.0)
  43  | (75.6, 226.5)   | (43.8, 186.0)
  44  | (104.5, 226.5)  | (72.7, 186.0)
  45  | (133.3, 226.5)  | (101.5, 186.0)
  46  | (162.1, 226.5)  | (130.3, 186.0)
  47  | (190.9, 226.5)  | (159.1, 186.0)
  48  | (219.8, 226.5)  | (188.0, 186.0)
Starting heater checks for heater_bed
Starting heater checks for extruder
webhooks: registering remote method 'shutdown_machine' for connection id: 140734741912592
webhooks: registering remote method 'reboot_machine' for connection id: 140734741912592
webhooks: registering remote method 'pause_job_queue' for connection id: 140734741912592
webhooks: registering remote method 'start_job_queue' for connection id: 140734741912592
Stats 392.2: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000016 mcu_task_stddev=0.000010 bytes_write=1126 bytes_read=5575 bytes_retransmit=9 bytes_invalid=11 send_seq=132 receive_seq=132 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997990  heater_bed: target=0 temp=22.9 pwm=0.000 raspberry_pi: temp=52.4 mcu_temp: temp=28.6 sysload=0.09 cputime=0.342 memavail=3352912 print_time=389.505 buffer_time=0.141 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Attempting MCU 'mcu' reset command
webhooks client 140734741912592: Disconnected
Restarting printer
Start printer at Wed Dec 27 08:35:19 2023 (1703662519.8 393.4)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]
recover_velocity = 25

[display_status]

[respond]
default_prefix = 

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	G0 X5 Y220 Z10
	CLEAR_PAUSE
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set x = params.X|default(5) %}
	{% set y = params.Y|default(225) %}
	{% set z = params.Z|default(10)|float %}
	{% set e = params.E|default(1) %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set lift_z = z|abs %}
	{% if act_z < (max_z - lift_z) %}
	{% set z_safe = lift_z %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	PAUSE_BASE
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E-{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe}
	G90
	G1 X{x} Y{y} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set e = params.E|default(1) %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro START_PRINT]
gcode = 
	RESPOND MSG="Preparing to print"
	
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
	SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 Z_HEIGHT=.3 PURGE_AMOUNT=20 LINE_LENGTH=25
	
	G90
	M83
	RESPOND MSG="Warming up for bed leveling"
	M104 S170
	M140 S{BED_TEMP}
	M109 S170
	M190 S{BED_TEMP}
	G28
	
	
	BED_MESH_CLEAR
	EXCLUDE_OBJECT_DEFINE
	RESPOND MSG="KAMP Adaptive Bed Meshing"
	BED_MESH_CALIBRATE
	Smart_Park
	RESPOND MSG="Heating to print temp"
	M104 S{EXTRUDER_TEMP}
	G0 Z50 F240
	RESPOND MSG="Clean bed and nozzle"
	G0 X2 Y220 F3000
	M109 S{EXTRUDER_TEMP}
	RESPOND MSG="KAMP Line Purge"
	LINE_PURGE
	RESPOND MSG="Print Started"

[gcode_macro END_PRINT]
gcode = 
	
	RESPOND MSG="Print Finished"
	G91
	G1 E-.5 Z0.2 F2400
	G1 X5 Y5 F6000
	G1 Z10
	G90
	
	
	G1 Z{printer.toolhead.position.z + 10} F600
	G1 X0 Y220 F6000
	M106 S0
	M104 S0
	M140 S0
	
	
	M84 X Y E

[gcode_macro G29]
gcode = 
	G28
	BED_MESH_CALIBRATE
	G0 X0 Y0 Z10 F6000
	BED_MESH_PROFILE save=default

[gcode_macro Load_Filament]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M117 Loading Filament
	M83
	G92 E0.0
	G1 E5 F200
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro Unload_Filament]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	M125
	M117 Unloading Filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-5 F3000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro Filament_Change]
gcode = 
	M117 Filament Change
	M118 Filament Change
	SAVE_GCODE_STATE NAME=filament_change
	PAUSE
	G91
	G1 E-1 F300
	M125
	G1 E-5 F300
	RESTORE_GCODE_STATE NAME=filament_change

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M125]
gcode = 
	SAVE_GCODE_STATE NAME=parking
	M117 Parking toolhead
	G91
	G1 Z10 F600
	G90
	G1 X5 Y225 F4000
	RESTORE_GCODE_STATE NAME=parking

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[gcode_macro _OBICO_LAYER_CHANGE]
description = Run a scan across the current print area
variable_current_layer = -1
variable_first_layer_scan_enabled = True
variable_first_layer_scan_stepover = 10
variable_first_layer_scan_feedrate = 600
variable_first_layer_scan_zhop = 4
variable_first_layer_scan_retract = 6.5
variable_first_layer_scanning = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=current_layer VALUE={params.CURRENT_LAYER|int}
	{% if first_layer_scan_enabled and params.CURRENT_LAYER|int == 2 %}
	SAVE_GCODE_STATE NAME=current_print_state
	{% set current_x = printer.toolhead.position.x %}
	{% set current_y = printer.toolhead.position.y %}
	
	{% if first_layer_scan_retract > 0 and printer[printer.toolhead.extruder].can_extrude %}
	M83
	G0 E-{first_layer_scan_retract} F900
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=first_layer_scanning VALUE=True
	G91
	G0 Z{first_layer_scan_zhop} F1000
	G90
	{% if 'MINX' in params and 'MAXX' in params and 'MINY' in params and 'MAXY' in params %}
	{% set stepoverCount = ((params.MAXY|float - params.MINY|float) / first_layer_scan_stepover) | round(method='ceil') | int %}
	G0 X{params.MINX} Y{params.MINY} F{first_layer_scan_feedrate}
	{% for ystep in range(stepoverCount) %}
	G0 Y{params.MINY|float + first_layer_scan_stepover * ystep}
	{% if ystep % 2 == 0 %}
	G0 X{params.MAXX} F{first_layer_scan_feedrate}
	{% else %}
	G0 X{params.MINX} F{first_layer_scan_feedrate}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	G0 X{current_x} Y{current_y} F{first_layer_scan_feedrate}
	G91
	G0 Z-{first_layer_scan_zhop} F1000
	
	{% if first_layer_scan_retract > 0 and printer[printer.toolhead.extruder].can_extrude %}
	G0 E{first_layer_scan_retract} F900
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=current_print_state
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=first_layer_scanning VALUE=False
	{% endif %}

[exclude_object]

[input_shaper]
shaper_freq_x = 68.8
shaper_type_x = mzv
shaper_freq_y = 44.4
shaper_type_y = mzv

[bltouch]
sensor_pin = ^PB1
control_pin = PB0
x_offset = -31.8
y_offset = -40.5
speed = 35
samples = 3
samples_result = median
samples_tolerance = 0.0075
samples_tolerance_retries = 10
probe_with_touch_mode = true
stow_on_each_sample = false
z_offset = 1.960

[safe_z_home]
home_xy_position = 147, 154
speed = 75
z_hop = 10
z_hop_speed = 5
move_to_previous = true

[bed_mesh]
speed = 120
horizontal_move_z = 8
mesh_min = 15,15
mesh_max = 188,186
probe_count = 7,7
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA5
position_endstop = 0
position_max = 250
homing_speed = 50

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA6
position_endstop = 0
position_max = 250
homing_speed = 50

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 240
position_min = -2

[extruder]
max_extrude_only_distance = 100.0
step_pin = PB4
dir_pin = PB3
enable_pin = !PC3
microsteps = 16
gear_ratio = 42:12
rotation_distance = 26.359
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
min_temp = 0
max_temp = 300
min_extrude_temp = 170
max_extrude_cross_section = 5
pressure_advance = .088
pressure_advance_smooth_time = 0.04
control = pid
pid_kp = 20.666
pid_ki = 1.158
pid_kd = 92.223

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 68.928
pid_ki = 1.081
pid_kd = 1098.546

[fan]
pin = PA0

[mcu]
serial = /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3500
max_accel_to_decel = 3500
max_z_velocity = 5
max_z_accel = 100
square_corner_velocity = 5

[bed_screws]
screw1 = 25, 205
screw1_name = rear left screw
screw2 = 195, 205
screw2_name = rear right screw
screw3 = 195, 35
screw3_name = front right screw
screw4 = 25, 35
screw4_name = front left screw

[screws_tilt_adjust]
screw1 = 57, 229
screw1_name = rear left screw
screw2 = 227, 229
screw2_name = rear right screw
screw3 = 227, 70
screw3_name = front right screw
screw4 = 57, 70
screw4_name = front left screw
horizontal_move_z = 10
speed = 50
screw_thread = CW-M3

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[firmware_retraction]
retract_length = 0.6
retract_speed = 85
unretract_extra_length = 0
unretract_speed = 40

[bed_mesh default]
version = 1
points = 
	0.100000, 0.065000, 0.032500, 0.070000
	0.097500, 0.082500, 0.022500, 0.077500
	0.132500, 0.057500, -0.002500, -0.005000
	0.145000, 0.102500, 0.075000, 0.115000
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 73.63000000000001
max_x = 146.36999999999998
min_y = 72.51
max_y = 147.46
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
webhooks client 140734742169936: New connection
webhooks client 140734742169936: Client info {'program': 'Moonraker', 'version': 'v0.8.0-223-g7fc5716'}
Loaded MCU 'mcu' 112 commands (v0.12.0-25-g99d7af87 / gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.39-8+rpi1+18) 2.39)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (46.8, 55.5)    | (15.0, 15.0)
  1   | (75.6, 55.5)    | (43.8, 15.0)
  2   | (104.5, 55.5)   | (72.7, 15.0)
  3   | (133.3, 55.5)   | (101.5, 15.0)
  4   | (162.1, 55.5)   | (130.3, 15.0)
  5   | (190.9, 55.5)   | (159.1, 15.0)
  6   | (219.8, 55.5)   | (188.0, 15.0)
  7   | (219.8, 84.0)   | (188.0, 43.5)
  8   | (190.9, 84.0)   | (159.1, 43.5)
  9   | (162.1, 84.0)   | (130.3, 43.5)
  10  | (133.3, 84.0)   | (101.5, 43.5)
  11  | (104.5, 84.0)   | (72.7, 43.5)
  12  | (75.6, 84.0)    | (43.8, 43.5)
  13  | (46.8, 84.0)    | (15.0, 43.5)
  14  | (46.8, 112.5)   | (15.0, 72.0)
  15  | (75.6, 112.5)   | (43.8, 72.0)
  16  | (104.5, 112.5)  | (72.7, 72.0)
  17  | (133.3, 112.5)  | (101.5, 72.0)
  18  | (162.1, 112.5)  | (130.3, 72.0)
  19  | (190.9, 112.5)  | (159.1, 72.0)
  20  | (219.8, 112.5)  | (188.0, 72.0)
  21  | (219.8, 141.0)  | (188.0, 100.5)
  22  | (190.9, 141.0)  | (159.1, 100.5)
  23  | (162.1, 141.0)  | (130.3, 100.5)
  24  | (133.3, 141.0)  | (101.5, 100.5)
  25  | (104.5, 141.0)  | (72.7, 100.5)
  26  | (75.6, 141.0)   | (43.8, 100.5)
  27  | (46.8, 141.0)   | (15.0, 100.5)
  28  | (46.8, 169.5)   | (15.0, 129.0)
  29  | (75.6, 169.5)   | (43.8, 129.0)
  30  | (104.5, 169.5)  | (72.7, 129.0)
  31  | (133.3, 169.5)  | (101.5, 129.0)
  32  | (162.1, 169.5)  | (130.3, 129.0)
  33  | (190.9, 169.5)  | (159.1, 129.0)
  34  | (219.8, 169.5)  | (188.0, 129.0)
  35  | (219.8, 198.0)  | (188.0, 157.5)
  36  | (190.9, 198.0)  | (159.1, 157.5)
  37  | (162.1, 198.0)  | (130.3, 157.5)
  38  | (133.3, 198.0)  | (101.5, 157.5)
  39  | (104.5, 198.0)  | (72.7, 157.5)
  40  | (75.6, 198.0)   | (43.8, 157.5)
  41  | (46.8, 198.0)   | (15.0, 157.5)
  42  | (46.8, 226.5)   | (15.0, 186.0)
  43  | (75.6, 226.5)   | (43.8, 186.0)
  44  | (104.5, 226.5)  | (72.7, 186.0)
  45  | (133.3, 226.5)  | (101.5, 186.0)
  46  | (162.1, 226.5)  | (130.3, 186.0)
  47  | (190.9, 226.5)  | (159.1, 186.0)
  48  | (219.8, 226.5)  | (188.0, 186.0)
Starting heater checks for heater_bed
Starting heater checks for extruder
Stats 395.5: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1145 bytes_read=4262 bytes_retransmit=0 bytes_invalid=0 send_seq=126 receive_seq=125 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72029894  heater_bed: target=0 temp=22.8 pwm=0.000 raspberry_pi: temp=54.5 mcu_temp: temp=28.6 sysload=0.08 cputime=0.522 memavail=3352624 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 140734742169936
webhooks: registering remote method 'reboot_machine' for connection id: 140734742169936
webhooks: registering remote method 'pause_job_queue' for connection id: 140734742169936
webhooks: registering remote method 'start_job_queue' for connection id: 140734742169936
Stats 396.5: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1151 bytes_read=4460 bytes_retransmit=0 bytes_invalid=0 send_seq=127 receive_seq=127 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72018579  heater_bed: target=0 temp=22.8 pwm=0.000 raspberry_pi: temp=54.5 mcu_temp: temp=28.6 sysload=0.08 cputime=0.528 memavail=3352624 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 397.5: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1157 bytes_read=4611 bytes_retransmit=0 bytes_invalid=0 send_seq=128 receive_seq=128 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72006261  heater_bed: target=0 temp=22.8 pwm=0.000 raspberry_pi: temp=54.5 mcu_temp: temp=28.5 sysload=0.08 cputime=0.533 memavail=3352640 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 398.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000019 mcu_task_stddev=0.000033 bytes_write=1163 bytes_read=4777 bytes_retransmit=0 bytes_invalid=0 send_seq=129 receive_seq=129 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72004199  heater_bed: target=0 temp=22.8 pwm=0.000 raspberry_pi: temp=54.5 mcu_temp: temp=28.6 sysload=0.08 cputime=0.535 memavail=3352640 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 399.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000019 mcu_task_stddev=0.000033 bytes_write=1169 bytes_read=4973 bytes_retransmit=0 bytes_invalid=0 send_seq=130 receive_seq=130 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72006481  heater_bed: target=0 temp=22.9 pwm=0.000 raspberry_pi: temp=53.5 mcu_temp: temp=28.6 sysload=0.08 cputime=0.538 memavail=3352640 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 400.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000019 mcu_task_stddev=0.000033 bytes_write=1175 bytes_read=5124 bytes_retransmit=0 bytes_invalid=0 send_seq=131 receive_seq=131 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72006250  heater_bed: target=0 temp=22.8 pwm=0.000 raspberry_pi: temp=53.5 mcu_temp: temp=28.5 sysload=0.07 cputime=0.542 memavail=3352640 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 401.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000019 mcu_task_stddev=0.000033 bytes_write=1181 bytes_read=5275 bytes_retransmit=0 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72003596  heater_bed: target=0 temp=22.9 pwm=0.000 raspberry_pi: temp=51.8 mcu_temp: temp=28.6 sysload=0.07 cputime=0.546 memavail=3352688 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 402.5: gcodein=0  mcu: mcu_awake=0.004 mcu_task_avg=0.000019 mcu_task_stddev=0.000033 bytes_write=1187 bytes_read=5471 bytes_retransmit=0 bytes_invalid=0 send_seq=133 receive_seq=133 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72003052  heater_bed: target=0 temp=22.8 pwm=0.000 raspberry_pi: temp=52.4 mcu_temp: temp=28.5 sysload=0.07 cputime=0.549 memavail=3346960 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 403.5: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=1193 bytes_read=5636 bytes_retransmit=0 bytes_invalid=0 send_seq=134 receive_seq=134 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72001852  heater_bed: target=0 temp=22.8 pwm=0.000 raspberry_pi: temp=53.5 mcu_temp: temp=28.6 sysload=0.07 cputime=0.552 memavail=3350400 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 404.5: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=1199 bytes_read=5787 bytes_retransmit=0 bytes_invalid=0 send_seq=135 receive_seq=135 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72001501  heater_bed: target=0 temp=22.9 pwm=0.000 raspberry_pi: temp=54.0 mcu_temp: temp=28.6 sysload=0.07 cputime=0.554 memavail=3350192 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 405.5: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=1205 bytes_read=5983 bytes_retransmit=0 bytes_invalid=0 send_seq=136 receive_seq=136 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72001531  heater_bed: target=0 temp=22.9 pwm=0.000 raspberry_pi: temp=54.5 mcu_temp: temp=28.5 sysload=0.07 cputime=0.557 memavail=3350192 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 406.5: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=1211 bytes_read=6134 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72001485  heater_bed: target=0 temp=22.8 pwm=0.000 raspberry_pi: temp=54.0 mcu_temp: temp=28.6 sysload=0.07 cputime=0.560 memavail=3350240 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 407.5: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=1217 bytes_read=6285 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72002054  heater_bed: target=0 temp=22.8 pwm=0.000 raspberry_pi: temp=54.5 mcu_temp: temp=28.5 sysload=0.07 cputime=0.562 memavail=3349520 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 408.5: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=1223 bytes_read=6495 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72002120  heater_bed: target=0 temp=22.9 pwm=0.000 raspberry_pi: temp=53.5 mcu_temp: temp=28.6 sysload=0.07 cputime=0.566 memavail=3349520 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
Stats 409.5: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=1229 bytes_read=6646 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72001611  heater_bed: target=0 temp=22.8 pwm=0.000 raspberry_pi: temp=53.5 mcu_temp: temp=28.6 sysload=0.07 cputime=0.569 memavail=3349520 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=22.9 pwm=0.000
